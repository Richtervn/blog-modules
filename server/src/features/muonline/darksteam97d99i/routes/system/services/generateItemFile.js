import _ from 'underscore';
import getItems from './getItems';

const aliasFields = {
  _id: 'Index'
};

export default async (getGameData, writeFile, pad) => {
  let shortDivider = '// ';
  let longDivider = '// ';
  shortDivider = pad(shortDivider, '-', 74, '');
  longDivider = pad(longDivider, '-', 245, '');

  const fileHeader = '// Generated By VuPham\n';

  let fileContent = '';
  const items = await getItems({}, getGameData);
  const groupIndexes = [];
  for (let i = 0; i <= 15; i++) {
    groupIndexes.push(i);
  }

  let maxNameLength = 0;
  Object.keys(items).map(category => {
    items[category].forEach(item => {
      if (item.Name.length > maxNameLength) {
        maxNameLength = item.Name.length;
      }
    });
  });

  fileContent += `${fileHeader}\n`;

  const categories = items.Categories;
  groupIndexes.forEach(index => {
    const category = _.findWhere(categories, { _id: index });
    const groupItems = items[category.Name];

    let groupDescription = `// GROUP ${index} - ${category.Name} (count: ${groupItems.length})`;
    const groupHeader = [shortDivider, groupDescription, shortDivider].join('\n');
    fileContent += `${groupHeader}\n`;

    let groupColDescription = '// ';
    category.Order.forEach((field, i) => {
      const prevKey = category.Order[i - 1];
      if (prevKey && prevKey == 'Name') {
        groupColDescription = pad(
          groupColDescription,
          ' ',
          groupColDescription.length + maxNameLength + 1,
          `[${field}]`
        );
      } else if (prevKey && prevKey == 'Zen') {
        groupColDescription = pad(
          groupColDescription,
          ' ',
          groupColDescription.length + 14,
          `[${aliasFields[field] || field}]`
        );
      } else if (prevKey) {
        groupColDescription += ` [${aliasFields[field] || field}]`;
      } else {
        groupColDescription += `[${aliasFields[field] || field}]`;
      }
    });

    let collumnHeader = [longDivider, groupColDescription, longDivider].join('\n');
    fileContent += `${collumnHeader}\n`;
    fileContent += `${category._id}\n`;

    groupItems.forEach(item => {
      let itemLine = '   ';

      category.Order.forEach((field, i) => {
        const passedKeys = category.Order.slice(0).filter((__, j) => j <= i);

        let indentLength = 3;
        passedKeys.forEach((col, n) => {
          let prevKey;
          if (passedKeys[n - 1]) {
            prevKey = aliasFields[passedKeys[n - 1]] ? aliasFields[passedKeys[n - 1]] : passedKeys[n - 1];
          }
          if (prevKey === 'Name') {
            indentLength += maxNameLength;
            indentLength += `[${prevKey}]`.length + 1;
          } else if (prevKey === 'Zen') {
            indentLength += 14;
            indentLength += `[${prevKey}]`.length + 1;
          } else if (prevKey) {
            indentLength += `[${prevKey}]`.length + 1;
          } else {
            indentLength++;
          }
        });

        let value = item[field];
        if (field === 'Name') {
          value = `"${item[field]}"`;
        }

        if (field === 'UseByDW_SM' && value == '0') {
          value = '1';
        }
        if (field === 'UseByDK_BK' && value == '0') {
          value = '1';
        }
        if (field === 'UseByElf_ME' && value == '0') {
          value = '1';
        }
        if (field === 'UseByMG' && value == '0') {
          value = '1';
        }
        itemLine = pad(itemLine, ' ', indentLength, value);
      });
      fileContent += itemLine + '\n';
    });

    fileContent += 'end\n\n';
  });

  await writeFile(`./public/Mu Online/Darksteam97d99i/Generated Files/item.txt`, fileContent);
  return './public/Mu Online/Darksteam97d99i/Generated Files/item.txt';
};
